// Mocks generated by Mockito 5.4.4 from annotations
// in currency_converter/test/mocks/generate_mock_providers.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:currency_converter/models/currency_list/currency_list.dart'
    as _i3;
import 'package:currency_converter/models/exchange_rate/exchange_rate.dart'
    as _i4;
import 'package:currency_converter/models/status/status.dart' as _i2;
import 'package:currency_converter/providers/currency_api_provider/currency_api_provider.dart'
    as _i5;
import 'package:currency_converter/providers/shared_preferences/shared_preferences_provider.dart'
    as _i8;
import 'package:currency_converter/utils/shared_preferences_constants.dart'
    as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeStatus_0 extends _i1.SmartFake implements _i2.Status {
  _FakeStatus_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCurrencyList_1 extends _i1.SmartFake implements _i3.CurrencyList {
  _FakeCurrencyList_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeExchangeRate_2 extends _i1.SmartFake implements _i4.ExchangeRate {
  _FakeExchangeRate_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CurrencyApiProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockCurrencyApiProvider extends _i1.Mock
    implements _i5.CurrencyApiProvider {
  MockCurrencyApiProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get endpoint => (super.noSuchMethod(
        Invocation.getter(#endpoint),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#endpoint),
        ),
      ) as String);

  @override
  _i7.Future<_i2.Status> getStatus() => (super.noSuchMethod(
        Invocation.method(
          #getStatus,
          [],
        ),
        returnValue: _i7.Future<_i2.Status>.value(_FakeStatus_0(
          this,
          Invocation.method(
            #getStatus,
            [],
          ),
        )),
      ) as _i7.Future<_i2.Status>);

  @override
  _i7.Future<_i3.CurrencyList> getCurrencies() => (super.noSuchMethod(
        Invocation.method(
          #getCurrencies,
          [],
        ),
        returnValue: _i7.Future<_i3.CurrencyList>.value(_FakeCurrencyList_1(
          this,
          Invocation.method(
            #getCurrencies,
            [],
          ),
        )),
      ) as _i7.Future<_i3.CurrencyList>);

  @override
  _i7.Future<_i4.ExchangeRate> getExchangeRate(
          {String? baseCurrency = r'USD'}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getExchangeRate,
          [],
          {#baseCurrency: baseCurrency},
        ),
        returnValue: _i7.Future<_i4.ExchangeRate>.value(_FakeExchangeRate_2(
          this,
          Invocation.method(
            #getExchangeRate,
            [],
            {#baseCurrency: baseCurrency},
          ),
        )),
      ) as _i7.Future<_i4.ExchangeRate>);

  @override
  _i7.Future<_i4.ExchangeRate> getHistoricalExchangeRate(
    DateTime? date, {
    String? baseCurrency = r'USD',
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getHistoricalExchangeRate,
          [date],
          {#baseCurrency: baseCurrency},
        ),
        returnValue: _i7.Future<_i4.ExchangeRate>.value(_FakeExchangeRate_2(
          this,
          Invocation.method(
            #getHistoricalExchangeRate,
            [date],
            {#baseCurrency: baseCurrency},
          ),
        )),
      ) as _i7.Future<_i4.ExchangeRate>);
}

/// A class which mocks [SharedPreferencesProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferencesProvider<T> extends _i1.Mock
    implements _i8.SharedPreferencesProvider<T> {
  MockSharedPreferencesProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<void> initialise() => (super.noSuchMethod(
        Invocation.method(
          #initialise,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> set(
    _i9.SharedPreferencesEnum? key,
    T? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #set,
          [
            key,
            value,
          ],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  T get(_i9.SharedPreferencesEnum? key) => (super.noSuchMethod(
        Invocation.method(
          #get,
          [key],
        ),
        returnValue: _i6.dummyValue<T>(
          this,
          Invocation.method(
            #get,
            [key],
          ),
        ),
      ) as T);

  @override
  dynamic containsKey(_i9.SharedPreferencesEnum? key) =>
      super.noSuchMethod(Invocation.method(
        #containsKey,
        [key],
      ));
}
